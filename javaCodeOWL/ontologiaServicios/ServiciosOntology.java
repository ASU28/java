// file: ServiciosOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package ontologiaServicios;

import jade.content.onto.*;
import jade.content.schema.*;
import jade.util.leap.HashMap;
import jade.content.lang.Codec;
import jade.core.CaseInsensitiveString;

/** file: ServiciosOntology.java
 * @author ontology bean generator
 * @version 2006/09/21, 14:44:03
 */
public class ServiciosOntology extends jade.content.onto.Ontology  {
  //NAME
  public static final String ONTOLOGY_NAME = "servicios";
  // The singleton instance of this ontology
  private static ReflectiveIntrospector introspect = new ReflectiveIntrospector();
  private static Ontology theInstance = new ServiciosOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String ACCEDER_P_PREDICATE_P="predicate_P";
    public static final String ACCEDER_P="Acceder_P";
    public static final String ACCEDER_SW_PREDICATE_SW="predicate_sw";
    public static final String ACCEDER_SW="Acceder_sw";
    public static final String ACCEDER_PRE_PREDICATE_PRE="predicate_Pre";
    public static final String ACCEDER_PRE="Acceder_Pre";
    public static final String PINFO_D_PREDICATE_INFO_D="predicate_Info_D";
    public static final String PINFO_D="PInfo_D";
    public static final String ACCEDER_S_PREDICATE_S="predicate_S";
    public static final String ACCEDER_S="Acceder_S";
    public static final String PINFO_PLAN_PREDICATE_INFO_PLAN="predicate_Info_plan";
    public static final String PINFO_PLAN="PInfo_Plan";
    public static final String ACCEDER_G_PREDICATE_G="predicate_G";
    public static final String ACCEDER_G="Acceder_G";
    public static final String PINFO_RP_PREDICATE_INFO_RP="predicate_Info_Rp";
    public static final String PINFO_RP="PInfo_Rp";
    public static final String ACCEDER_PA_PREDICATE_PA="predicate_PA";
    public static final String ACCEDER_PA="Acceder_PA";
    public static final String ACCEDER_M_PREDICATE_M="predicate_M";
    public static final String ACCEDER_M="Acceder_M";
    public static final String PINFO_ACTIVEP_PREDICATE_INFO_ACTIVEP="predicate_Info_ActiveP";
    public static final String PINFO_ACTIVEP="PInfo_ActiveP";
    public static final String ACCEDER_PS_PREDICATE_PS="predicate_PS";
    public static final String ACCEDER_PS="Acceder_PS";
    public static final String ACCEDER_EF_PREDICATE_EF="predicate_Ef";
    public static final String ACCEDER_EF="Acceder_Ef";
    public static final String ACCEDER_PC_PREDICATE_PC="predicate_PC";
    public static final String ACCEDER_PC="Acceder_PC";
    public static final String ACCEDER_EN_PREDICATE_EN="predicate_En";
    public static final String ACCEDER_EN="Acceder_En";
    public static final String AAINFO_ACTIVEP_ACTION_INFO_ACTIVEP="action_Info_ActiveP";
    public static final String AAINFO_ACTIVEP="AAInfo_ActiveP";
    public static final String ACCEDE_M_ACTION_M="action_M";
    public static final String ACCEDE_M="Accede_M";
    public static final String ACCEDE_EF_ACTION_EF="action_Ef";
    public static final String ACCEDE_EF="Accede_Ef";
    public static final String ACCEDE_S_ACTION_S="action_S";
    public static final String ACCEDE_S="Accede_S";
    public static final String ACCEDE_SW_ACTION_SW="action_sw";
    public static final String ACCEDE_SW="Accede_sw";
    public static final String AAINFO_RP_ACTION_INFO_RP="action_Info_Rp";
    public static final String AAINFO_RP="AAInfo_Rp";
    public static final String AAINFO_PLAN_ACTION_INFO_PLAN="action_Info_Plan";
    public static final String AAINFO_PLAN="AAInfo_Plan";
    public static final String ACCEDE_G_ACTION_G="action_G";
    public static final String ACCEDE_G="Accede_G";
    public static final String ACCEDE_PA_ACTION_PA="action_PA";
    public static final String ACCEDE_PA="Accede_PA";
    public static final String ACCEDE_PS_ACTION_PS="action_PS";
    public static final String ACCEDE_PS="Accede_PS";
    public static final String ACCEDE_P_ACTION_P="action_P";
    public static final String ACCEDE_P="Accede_P";
    public static final String AAINFO_D_ACTION_INFO_D="action_Info_D";
    public static final String AAINFO_D="AAInfo_D";
    public static final String ACCEDE_EN_ACTION_EN="action_En";
    public static final String ACCEDE_EN="Accede_En";
    public static final String ACCEDE_PC_ACTION_PC="action_PC";
    public static final String ACCEDE_PC="Accede_PC";
    public static final String ACCEDE_PRE_ACTION_PRE="action_Pre";
    public static final String ACCEDE_PRE="Accede_Pre";
    public static final String PROFILE_IDPROFILE="idProfile";
    public static final String PROFILE="Profile";
    public static final String SERVICIO_ID="id";
    public static final String SERVICIO_COMENTARIO="comentario";
    public static final String SERVICIO="Servicio";
    public static final String ACTIVEPROYECTO_RUTA_ACTIVEPROYECTO="ruta_ActiveProyecto";
    public static final String ACTIVEPROYECTO="ActiveProyecto";
    public static final String ENTRADA_PARAMETROSENTRADA="parametrosEntrada";
    public static final String ENTRADA_IDENTRADA="idEntrada";
    public static final String ENTRADA="Entrada";
    public static final String REPOSITORIO_RUTA="ruta";
    public static final String REPOSITORIO="Repositorio";
    public static final String GROUNDING_IDGROUNDIG="idGroundig";
    public static final String GROUNDING="Grounding";
    public static final String PROCESOATOMICO_IDATOMICOP="idAtomicoP";
    public static final String PROCESOATOMICO="ProcesoAtomico";
    public static final String MODEL_IDMODEL="idModel";
    public static final String MODEL="Model";
    public static final String PRECONDICION_EXPRESIONPRE="expresionPre";
    public static final String PRECONDICION="Precondicion";
    public static final String EFECTO_EXPRESIONE="expresionE";
    public static final String EFECTO="Efecto";
    public static final String PLAN_RUTA_PLAN="ruta_plan";
    public static final String PLAN="Plan";
    public static final String PROCESOCOMPUESTO_IDCOMPUESTOP="idCompuestoP";
    public static final String PROCESOCOMPUESTO="ProcesoCompuesto";
    public static final String SALIDA_PARAMETROSSALIDA="parametrosSalida";
    public static final String SALIDA_IDSALIDA="idSalida";
    public static final String SALIDA="Salida";
    public static final String PROCESOSIMPLE_IDSIMPLEP="idSimpleP";
    public static final String PROCESOSIMPLE="ProcesoSimple";
    public static final String DOMINIO_ID_DOMINIO="id_dominio";
    public static final String DOMINIO_RUTAD="rutaD";
    public static final String DOMINIO="Dominio";

  /**
   * Constructor
  */
  private ServiciosOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema dominioSchema = new ConceptSchema(DOMINIO);
    add(dominioSchema, ontologiaServicios.Dominio.class);
    ConceptSchema procesoSimpleSchema = new ConceptSchema(PROCESOSIMPLE);
    add(procesoSimpleSchema, ontologiaServicios.ProcesoSimple.class);
    ConceptSchema salidaSchema = new ConceptSchema(SALIDA);
    add(salidaSchema, ontologiaServicios.Salida.class);
    ConceptSchema procesoCompuestoSchema = new ConceptSchema(PROCESOCOMPUESTO);
    add(procesoCompuestoSchema, ontologiaServicios.ProcesoCompuesto.class);
    ConceptSchema planSchema = new ConceptSchema(PLAN);
    add(planSchema, ontologiaServicios.Plan.class);
    ConceptSchema efectoSchema = new ConceptSchema(EFECTO);
    add(efectoSchema, ontologiaServicios.Efecto.class);
    ConceptSchema precondicionSchema = new ConceptSchema(PRECONDICION);
    add(precondicionSchema, ontologiaServicios.Precondicion.class);
    ConceptSchema modelSchema = new ConceptSchema(MODEL);
    add(modelSchema, ontologiaServicios.Model.class);
    ConceptSchema procesoAtomicoSchema = new ConceptSchema(PROCESOATOMICO);
    add(procesoAtomicoSchema, ontologiaServicios.ProcesoAtomico.class);
    ConceptSchema groundingSchema = new ConceptSchema(GROUNDING);
    add(groundingSchema, ontologiaServicios.Grounding.class);
    ConceptSchema repositorioSchema = new ConceptSchema(REPOSITORIO);
    add(repositorioSchema, ontologiaServicios.Repositorio.class);
    ConceptSchema entradaSchema = new ConceptSchema(ENTRADA);
    add(entradaSchema, ontologiaServicios.Entrada.class);
    ConceptSchema activeProyectoSchema = new ConceptSchema(ACTIVEPROYECTO);
    add(activeProyectoSchema, ontologiaServicios.ActiveProyecto.class);
    ConceptSchema servicioSchema = new ConceptSchema(SERVICIO);
    add(servicioSchema, ontologiaServicios.Servicio.class);
    ConceptSchema profileSchema = new ConceptSchema(PROFILE);
    add(profileSchema, ontologiaServicios.Profile.class);

    // adding AgentAction(s)
    AgentActionSchema accede_PreSchema = new AgentActionSchema(ACCEDE_PRE);
    add(accede_PreSchema, ontologiaServicios.Accede_Pre.class);
    AgentActionSchema accede_PCSchema = new AgentActionSchema(ACCEDE_PC);
    add(accede_PCSchema, ontologiaServicios.Accede_PC.class);
    AgentActionSchema accede_EnSchema = new AgentActionSchema(ACCEDE_EN);
    add(accede_EnSchema, ontologiaServicios.Accede_En.class);
    AgentActionSchema aaInfo_DSchema = new AgentActionSchema(AAINFO_D);
    add(aaInfo_DSchema, ontologiaServicios.AAInfo_D.class);
    AgentActionSchema accede_PSchema = new AgentActionSchema(ACCEDE_P);
    add(accede_PSchema, ontologiaServicios.Accede_P.class);
    AgentActionSchema accede_PSSchema = new AgentActionSchema(ACCEDE_PS);
    add(accede_PSSchema, ontologiaServicios.Accede_PS.class);
    AgentActionSchema accede_PASchema = new AgentActionSchema(ACCEDE_PA);
    add(accede_PASchema, ontologiaServicios.Accede_PA.class);
    AgentActionSchema accede_GSchema = new AgentActionSchema(ACCEDE_G);
    add(accede_GSchema, ontologiaServicios.Accede_G.class);
    AgentActionSchema aaInfo_PlanSchema = new AgentActionSchema(AAINFO_PLAN);
    add(aaInfo_PlanSchema, ontologiaServicios.AAInfo_Plan.class);
    AgentActionSchema aaInfo_RpSchema = new AgentActionSchema(AAINFO_RP);
    add(aaInfo_RpSchema, ontologiaServicios.AAInfo_Rp.class);
    AgentActionSchema accede_swSchema = new AgentActionSchema(ACCEDE_SW);
    add(accede_swSchema, ontologiaServicios.Accede_sw.class);
    AgentActionSchema accede_SSchema = new AgentActionSchema(ACCEDE_S);
    add(accede_SSchema, ontologiaServicios.Accede_S.class);
    AgentActionSchema accede_EfSchema = new AgentActionSchema(ACCEDE_EF);
    add(accede_EfSchema, ontologiaServicios.Accede_Ef.class);
    AgentActionSchema accede_MSchema = new AgentActionSchema(ACCEDE_M);
    add(accede_MSchema, ontologiaServicios.Accede_M.class);
    AgentActionSchema aaInfo_ActivePSchema = new AgentActionSchema(AAINFO_ACTIVEP);
    add(aaInfo_ActivePSchema, ontologiaServicios.AAInfo_ActiveP.class);

    // adding AID(s)

    // adding Predicate(s)
    PredicateSchema acceder_EnSchema = new PredicateSchema(ACCEDER_EN);
    add(acceder_EnSchema, ontologiaServicios.Acceder_En.class);
    PredicateSchema acceder_PCSchema = new PredicateSchema(ACCEDER_PC);
    add(acceder_PCSchema, ontologiaServicios.Acceder_PC.class);
    PredicateSchema acceder_EfSchema = new PredicateSchema(ACCEDER_EF);
    add(acceder_EfSchema, ontologiaServicios.Acceder_Ef.class);
    PredicateSchema acceder_PSSchema = new PredicateSchema(ACCEDER_PS);
    add(acceder_PSSchema, ontologiaServicios.Acceder_PS.class);
    PredicateSchema pInfo_ActivePSchema = new PredicateSchema(PINFO_ACTIVEP);
    add(pInfo_ActivePSchema, ontologiaServicios.PInfo_ActiveP.class);
    PredicateSchema acceder_MSchema = new PredicateSchema(ACCEDER_M);
    add(acceder_MSchema, ontologiaServicios.Acceder_M.class);
    PredicateSchema acceder_PASchema = new PredicateSchema(ACCEDER_PA);
    add(acceder_PASchema, ontologiaServicios.Acceder_PA.class);
    PredicateSchema pInfo_RpSchema = new PredicateSchema(PINFO_RP);
    add(pInfo_RpSchema, ontologiaServicios.PInfo_Rp.class);
    PredicateSchema acceder_GSchema = new PredicateSchema(ACCEDER_G);
    add(acceder_GSchema, ontologiaServicios.Acceder_G.class);
    PredicateSchema pInfo_PlanSchema = new PredicateSchema(PINFO_PLAN);
    add(pInfo_PlanSchema, ontologiaServicios.PInfo_Plan.class);
    PredicateSchema acceder_SSchema = new PredicateSchema(ACCEDER_S);
    add(acceder_SSchema, ontologiaServicios.Acceder_S.class);
    PredicateSchema pInfo_DSchema = new PredicateSchema(PINFO_D);
    add(pInfo_DSchema, ontologiaServicios.PInfo_D.class);
    PredicateSchema acceder_PreSchema = new PredicateSchema(ACCEDER_PRE);
    add(acceder_PreSchema, ontologiaServicios.Acceder_Pre.class);
    PredicateSchema acceder_swSchema = new PredicateSchema(ACCEDER_SW);
    add(acceder_swSchema, ontologiaServicios.Acceder_sw.class);
    PredicateSchema acceder_PSchema = new PredicateSchema(ACCEDER_P);
    add(acceder_PSchema, ontologiaServicios.Acceder_P.class);


    // adding fields
    dominioSchema.add(DOMINIO_RUTAD, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    dominioSchema.add(DOMINIO_ID_DOMINIO, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    procesoSimpleSchema.add(PROCESOSIMPLE_IDSIMPLEP, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    salidaSchema.add(SALIDA_IDSALIDA, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    salidaSchema.add(SALIDA_PARAMETROSSALIDA, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    procesoCompuestoSchema.add(PROCESOCOMPUESTO_IDCOMPUESTOP, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    planSchema.add(PLAN_RUTA_PLAN, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    efectoSchema.add(EFECTO_EXPRESIONE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    precondicionSchema.add(PRECONDICION_EXPRESIONPRE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    modelSchema.add(MODEL_IDMODEL, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    procesoAtomicoSchema.add(PROCESOATOMICO_IDATOMICOP, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    groundingSchema.add(GROUNDING_IDGROUNDIG, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    repositorioSchema.add(REPOSITORIO_RUTA, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    entradaSchema.add(ENTRADA_IDENTRADA, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    entradaSchema.add(ENTRADA_PARAMETROSENTRADA, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    activeProyectoSchema.add(ACTIVEPROYECTO_RUTA_ACTIVEPROYECTO, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    servicioSchema.add(SERVICIO_COMENTARIO, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    servicioSchema.add(SERVICIO_ID, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    profileSchema.add(PROFILE_IDPROFILE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    accede_PreSchema.add(ACCEDE_PRE_ACTION_PRE, precondicionSchema, ObjectSchema.OPTIONAL);
    accede_PCSchema.add(ACCEDE_PC_ACTION_PC, procesoCompuestoSchema, ObjectSchema.OPTIONAL);
    accede_EnSchema.add(ACCEDE_EN_ACTION_EN, entradaSchema, ObjectSchema.OPTIONAL);
    aaInfo_DSchema.add(AAINFO_D_ACTION_INFO_D, dominioSchema, ObjectSchema.MANDATORY);
    accede_PSchema.add(ACCEDE_P_ACTION_P, profileSchema, ObjectSchema.MANDATORY);
    accede_PSSchema.add(ACCEDE_PS_ACTION_PS, procesoSimpleSchema, ObjectSchema.OPTIONAL);
    accede_PASchema.add(ACCEDE_PA_ACTION_PA, procesoAtomicoSchema, ObjectSchema.OPTIONAL);
    accede_GSchema.add(ACCEDE_G_ACTION_G, groundingSchema, ObjectSchema.OPTIONAL);
    aaInfo_PlanSchema.add(AAINFO_PLAN_ACTION_INFO_PLAN, planSchema, ObjectSchema.MANDATORY);
    aaInfo_RpSchema.add(AAINFO_RP_ACTION_INFO_RP, repositorioSchema, ObjectSchema.OPTIONAL);
    accede_swSchema.add(ACCEDE_SW_ACTION_SW, servicioSchema, ObjectSchema.MANDATORY);
    accede_SSchema.add(ACCEDE_S_ACTION_S, salidaSchema, ObjectSchema.OPTIONAL);
    accede_EfSchema.add(ACCEDE_EF_ACTION_EF, efectoSchema, ObjectSchema.OPTIONAL);
    accede_MSchema.add(ACCEDE_M_ACTION_M, modelSchema, ObjectSchema.OPTIONAL);
    aaInfo_ActivePSchema.add(AAINFO_ACTIVEP_ACTION_INFO_ACTIVEP, activeProyectoSchema, ObjectSchema.MANDATORY);
    acceder_EnSchema.add(ACCEDER_EN_PREDICATE_EN, entradaSchema, ObjectSchema.OPTIONAL);
    acceder_PCSchema.add(ACCEDER_PC_PREDICATE_PC, procesoCompuestoSchema, ObjectSchema.OPTIONAL);
    acceder_EfSchema.add(ACCEDER_EF_PREDICATE_EF, efectoSchema, ObjectSchema.OPTIONAL);
    acceder_PSSchema.add(ACCEDER_PS_PREDICATE_PS, procesoSimpleSchema, ObjectSchema.OPTIONAL);
    pInfo_ActivePSchema.add(PINFO_ACTIVEP_PREDICATE_INFO_ACTIVEP, activeProyectoSchema, ObjectSchema.MANDATORY);
    acceder_MSchema.add(ACCEDER_M_PREDICATE_M, modelSchema, ObjectSchema.OPTIONAL);
    acceder_PASchema.add(ACCEDER_PA_PREDICATE_PA, procesoAtomicoSchema, ObjectSchema.OPTIONAL);
    pInfo_RpSchema.add(PINFO_RP_PREDICATE_INFO_RP, repositorioSchema, ObjectSchema.OPTIONAL);
    acceder_GSchema.add(ACCEDER_G_PREDICATE_G, groundingSchema, ObjectSchema.OPTIONAL);
    pInfo_PlanSchema.add(PINFO_PLAN_PREDICATE_INFO_PLAN, planSchema, ObjectSchema.MANDATORY);
    acceder_SSchema.add(ACCEDER_S_PREDICATE_S, salidaSchema, ObjectSchema.OPTIONAL);
    pInfo_DSchema.add(PINFO_D_PREDICATE_INFO_D, dominioSchema, ObjectSchema.MANDATORY);
    acceder_PreSchema.add(ACCEDER_PRE_PREDICATE_PRE, precondicionSchema, ObjectSchema.OPTIONAL);
    acceder_swSchema.add(ACCEDER_SW_PREDICATE_SW, servicioSchema, ObjectSchema.OPTIONAL);
    acceder_PSchema.add(ACCEDER_P_PREDICATE_P, profileSchema, ObjectSchema.OPTIONAL);

    // adding name mappings

    // adding inheritance

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
  }
